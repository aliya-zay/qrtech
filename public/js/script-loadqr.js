const qrCodesContainer = document.getElementById('my-qr-codes-container');
const searchInput = document.getElementById('search-input'); // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
const searchButton = document.getElementById('search-button'); // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–π—Ç–∏"
let qrCodes = [];  // –û–±—ä—è–≤–ª—è–µ–º qrCodes –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é


// –§—É–Ω–∫—Ü–∏—è sortQrCodes –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –î–û –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function sortQrCodes(sortBy) {
    console.log("–§—É–Ω–∫—Ü–∏—è sortQrCodes –≤—ã–∑–≤–∞–Ω–∞ —Å sortBy:", sortBy);
    loadMyQrCodes(sortBy);
}

async function loadMyQrCodes(sortBy = null) {
    try {
        let url = '/qrcodes/myqrcodes';
        if (sortBy) {
            url += `?sortBy=${sortBy}`;
        }
        const response = await fetch(url);

        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ QR-–∫–æ–¥–æ–≤: ${response.status}`);
        }

        qrCodes = await response.json(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ QR-–∫–æ–¥—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        displayQrCodes(qrCodes); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º QR-–∫–æ–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ QR-–∫–æ–¥–æ–≤:', error);
        document.getElementById('my-qr-codes-container').innerHTML = '<p>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ QR-–∫–æ–¥–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>';
    }
}

//–∑–≤–µ–∑–¥–æ—á–∫–∞
async function toggleFavorite(qrId, button) {
    try {
        const response = await fetch('/qrcodes/favorite', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ qrId: qrId })
        });

        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: ${response.status}`);
        }

        const data = await response.json();
        const isFavorite = data.is_favorite;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–æ–∫ –∑–≤–µ–∑–¥–æ—á–∫–∏
        button.innerHTML = isFavorite ? '‚òÖ' : '‚òÜ';

        // üí° –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const index = qrCodes.findIndex(qr => qr.id === qrId);
        if (index !== -1) {
            qrCodes[index].is_favorite = isFavorite;
        }

        // üí° –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ localStorage
        localStorage.setItem(`favorite_${qrId}`, isFavorite);

        // üí° –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º QR-–∫–æ–¥—ã
        displayQrCodes(qrCodes);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}


function displayQrCodes(qrCodesToDisplay) {
    qrCodesContainer.innerHTML = '';

    if (!qrCodesToDisplay || qrCodesToDisplay.length === 0) {
        qrCodesContainer.innerHTML = '<p>QR-–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>';
        return;
    }

    qrCodesToDisplay.forEach(qrCode => {
        const qrCodeDiv = document.createElement('div');
        qrCodeDiv.classList.add('qr-code-item');

        const qrCodeImage = document.createElement('img');
        qrCodeImage.src = `data:image/png;base64,${qrCode.qr}`;
        qrCodeImage.alt = qrCode.title || 'QR-–∫–æ–¥';        

        const qrCodeTitle = document.createElement('h3');
        qrCodeTitle.textContent = qrCode.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';

        const qrCodeDate = document.createElement('p');
        qrCodeDate.textContent = `–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date(qrCode.created_at).toLocaleDateString()}`;

        // –ö–Ω–æ–ø–∫–∞-–∑–≤–µ–∑–¥–æ—á–∫–∞
        const favoriteButton = document.createElement('button');
        favoriteButton.classList.add('favorite-button');
        favoriteButton.dataset.qrId = qrCode.id; // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID QR-–∫–æ–¥–∞ –≤ data-–∞—Ç—Ä–∏–±—É—Ç–µ

        // üí° –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ localStorage
        const isFavorite = localStorage.getItem(`favorite_${qrCode.id}`) === 'true';
        qrCode.is_favorite = isFavorite;  //–û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ qrCode.is_favorite
        favoriteButton.innerHTML = isFavorite ? '‚òÖ' : '‚òÜ';

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∫ –∫–Ω–æ–ø–∫–µ-–∑–≤–µ–∑–¥–æ—á–∫–µ
        favoriteButton.addEventListener('click', async () => {
            await toggleFavorite(qrCode.id, favoriteButton); // –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        });

        // –ú–µ–Ω—é —Å —Ç—Ä–µ–º—è —Ç–æ—á–∫–∞–º–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        const optionsMenu = document.createElement('div');
        optionsMenu.classList.add('options-menu');

        const optionsButton = document.createElement('button');
        optionsButton.classList.add('options-button');
        optionsButton.innerHTML = '&#8942;';

        const optionsDropdown = document.createElement('div');
        optionsDropdown.classList.add('options-dropdown');

        // –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—á–∞—Ç—å"
        const downloadBtn = document.createElement('button');
        downloadBtn.textContent = '–°–∫–∞—á–∞—Ç—å';
        downloadBtn.classList.add('download-button');
        downloadBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            downloadQrCode(qrCode);
        });

        // –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å"
        const renameBtn = document.createElement('button');
        renameBtn.textContent = '–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å';
        renameBtn.classList.add('rename-button');
        renameBtn.addEventListener('click', () => {
            renameQrCode(qrCode.id);
        });

        // –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å"
        const deleteBtn = document.createElement('button');
        deleteBtn.textContent = '–£–¥–∞–ª–∏—Ç—å';
        deleteBtn.classList.add('delete-button');
        deleteBtn.addEventListener('click', () => {
            deleteQrCode(qrCode.id);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ dropdown
        optionsDropdown.appendChild(downloadBtn);
        optionsDropdown.appendChild(renameBtn);
        optionsDropdown.appendChild(deleteBtn);

        // –°–æ–±–∏—Ä–∞–µ–º –º–µ–Ω—é
        optionsMenu.appendChild(optionsButton);
        optionsMenu.appendChild(optionsDropdown);

        qrCodeDiv.appendChild(qrCodeImage);
        qrCodeDiv.appendChild(qrCodeTitle);
        qrCodeDiv.appendChild(qrCodeDate);
        qrCodeDiv.appendChild(favoriteButton); // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É-–∑–≤–µ–∑–¥–æ—á–∫—É –∫ qrCodeDiv
        qrCodeDiv.appendChild(optionsMenu); // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é –∫ qrCodeDiv
        qrCodesContainer.appendChild(qrCodeDiv);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫ –∫–Ω–æ–ø–∫–∞–º "–£–¥–∞–ª–∏—Ç—å" –∏ "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å"
        const deleteButton = qrCodeDiv.querySelector('.delete-button');
        deleteButton.addEventListener('click', () => {
            const qrId = deleteButton.dataset.qrId;
            deleteQrCode(qrId); // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è
        });
        
    });
}

function toggleSortDropdown() {
    document.getElementById("sortDropdown").classList.toggle("show");
}

window.addEventListener('load', () => {
    const sortByDateButton = document.getElementById('sortByDateButton');
    const sortByTitleButton = document.getElementById('sortByTitleButton');
    loadMyQrCodes();

    if (sortByDateButton) {
        sortByDateButton.addEventListener('click', () => {
            console.log("–ö–Ω–æ–ø–∫–∞ '–ü–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è' –Ω–∞–∂–∞—Ç–∞");
            sortQrCodes('date'); // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é sortQrCodes
        });
    }

    if (sortByTitleButton) {
        sortByTitleButton.addEventListener('click', () => {
            console.log("–ö–Ω–æ–ø–∫–∞ '–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é' –Ω–∞–∂–∞—Ç–∞");
            sortQrCodes('title'); // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é sortQrCodes
        });
    }
});

//–∏–∑–±—Ä–∞–Ω–Ω–æ–µ
const favoritesButton = document.getElementById('favorites-button');

if (favoritesButton) {
    favoritesButton.addEventListener('click', () => {
        // –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ" –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        window.location.href = '/favorites.html'; // –ò–ª–∏ –¥—Ä—É–≥–∞—è –ª–æ–≥–∏–∫–∞
    });
}

//–Ω–∞–∑–∞–¥
function goBack() {
    window.history.back();
}


// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è click –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–π—Ç–∏"
if (searchButton) {
    searchButton.addEventListener('click', filterQrCodes);
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
function filterQrCodes() {
    const searchTerm = searchInput.value.toLowerCase();  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    const filteredQrCodes = qrCodes.filter(qrCode => { // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ qrCodes
        const title = qrCode.title ? qrCode.title.toLowerCase() : '';
        return title.includes(searchTerm); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    });
    displayQrCodes(filteredQrCodes); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ QR-–∫–æ–¥—ã
}


//—É–¥–∞–ª–∏—Ç—å –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è QR-–∫–æ–¥–∞
async function deleteQrCode(qrId) {
    try {
        const response = await fetch('/qrcodes/delete', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ qrId: qrId })
        });

        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ QR-–∫–æ–¥–∞: ${response.status}`);
        }

        const data = await response.json();
        console.log(data.message); // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ QR-–∫–æ–¥–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        loadMyQrCodes();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ QR-–∫–æ–¥–∞:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ QR-–∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞
async function renameQrCode(qrId) {
    const newTitle = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è QR-–∫–æ–¥–∞:');

    if (newTitle) {
        try {
            const response = await fetch('/qrcodes/rename', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ qrId: qrId, title: newTitle })
            });

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ QR-–∫–æ–¥–∞: ${response.status}`);
            }

            const data = await response.json();
            console.log(data.message); // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ QR-–∫–æ–¥–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
            loadMyQrCodes();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ QR-–∫–æ–¥–∞:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ QR-–∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
}

// === üîí –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ ===
const logoutButton = document.getElementById("logout-button");
if (logoutButton) {
    logoutButton.addEventListener("click", async function (e) {
        e.preventDefault();
        try {
            const response = await fetch("/logout", {
                method: "POST",
            });
            if (response.ok) {
                window.location.href = "/";
            } else {
                alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ");
            }
        } catch (err) {
            console.error("Logout error", err);
            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ");
        }
    });
}


function downloadQrCode(qrCode) {
    const base64Data = qrCode.qr;
    const imageDataUrl = `data:image/png;base64,${base64Data}`;

    const link = document.createElement('a');
    link.href = imageDataUrl;
    link.download = `${qrCode.title || 'qr-code'}.png`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}



