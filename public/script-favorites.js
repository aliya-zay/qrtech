const qrCodesContainer = document.getElementById('my-favorite-qr-codes-container');
const searchInput = document.getElementById('search-input');
const searchButton = document.getElementById('search-button');
let qrCodes = [];  // –û–±—ä—è–≤–ª—è–µ–º qrCodes –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

async function loadMyFavoriteQrCodes() {
    try {
        const response = await fetch('/qrcodes/myfavorites');

        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö QR-–∫–æ–¥–æ–≤: ${response.status}`);
        }

        qrCodes = await response.json(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ QR-–∫–æ–¥—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        displayQrCodes(qrCodes); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º QR-–∫–æ–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö QR-–∫–æ–¥–æ–≤:', error);
        document.getElementById('my-favorite-qr-codes-container').innerHTML = '<p>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö QR-–∫–æ–¥–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>';
    }
}

function displayQrCodes(qrCodesToDisplay) {
    qrCodesContainer.innerHTML = '';

    if (!qrCodesToDisplay || qrCodesToDisplay.length === 0) {
        qrCodesContainer.innerHTML = '<p>QR-–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>';
        return;
    }

    qrCodesToDisplay.forEach(qrCode => {
        const qrCodeDiv = document.createElement('div');
        qrCodeDiv.classList.add('qr-code-item');

        const qrCodeImage = document.createElement('img');
        qrCodeImage.src = `data:image/png;base64,${qrCode.qr}`;
        qrCodeImage.alt = qrCode.title || 'QR-–∫–æ–¥';        

        const qrCodeTitle = document.createElement('h3');
        qrCodeTitle.textContent = qrCode.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';

        const qrCodeDate = document.createElement('p');
        qrCodeDate.textContent = `–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date(qrCode.created_at).toLocaleDateString()}`;

        qrCodeDiv.appendChild(qrCodeImage);
        qrCodeDiv.appendChild(qrCodeTitle);
        qrCodeDiv.appendChild(qrCodeDate);
        qrCodesContainer.appendChild(qrCodeDiv);
    });
}


// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö QR-–∫–æ–¥–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', () => {
    loadMyFavoriteQrCodes();
    if (searchButton) {
        searchButton.addEventListener('click', filterQrCodes);
    }
});

//–Ω–∞–∑–∞–¥
function goBack() {
    window.history.back();
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
function filterQrCodes() {
    const searchTerm = searchInput.value.toLowerCase();  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    const filteredQrCodes = qrCodes.filter(qrCode => { // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ qrCodes
        const title = qrCode.title ? qrCode.title.toLowerCase() : '';
        return title.includes(searchTerm); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    });
    displayQrCodes(filteredQrCodes); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ QR-–∫–æ–¥—ã
}

// === üîí –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ ===
const logoutButton = document.getElementById("logout-button");
if (logoutButton) {
    logoutButton.addEventListener("click", async function (e) {
        e.preventDefault();
        try {
            const response = await fetch("/logout", {
                method: "POST",
            });
            if (response.ok) {
                window.location.href = "/";
            } else {
                alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ");
            }
        } catch (err) {
            console.error("Logout error", err);
            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ");
        }
    });
}
